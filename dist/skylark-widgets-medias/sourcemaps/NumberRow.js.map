{"version":3,"sources":["NumberRow.js"],"names":["define","Widget","StaticText","numerics","NumberBox","inherit","_construct","parent","prototype","call","this","values","labelSize","setStep","value","String","i","length","input","setRange","min","max","addValue","label","text","setText","push","_updateSize","width","Math","round","size","x","position","set","y","updateInterface","NumberRow"],"mappings":";;;;;;;AAAAA,QACC,8BACA,mCACA,aACA,eACC,SAASC,EAAOC,EAAWC,EAASC,GACrC,aAQIA,EAAYH,EAAOI,SAEtBC,WAAa,SAAUC,GACtBN,EAAOO,UAAUF,WAAWG,KAAKC,KAAMH,EAAQ,OAU/CG,KAAKC,UAQLD,KAAKE,UAAY,IASlBC,QAAU,SAASC,GACdA,EAAQC,OAAOD,GAEnB,IAFA,IAEQE,EAAI,EAAGA,EAAIN,KAAKC,OAAOM,OAAQD,IACtCN,KAAKC,OAAOK,GAAGE,MAAML,QAAQC,IAW/BK,SAAW,SAASC,EAAKC,GACnBD,EAAML,OAAOK,GACbC,EAAMN,OAAOM,GAElB,IAHC,IAGOL,EAAI,EAAGA,EAAIN,KAAKC,OAAOM,OAAQD,IACtCN,KAAKC,OAAOK,GAAGE,MAAMC,SAASC,EAAKC,IAWrCC,SAAW,SAASC,GACnB,IAAIL,EAAQ,IAAId,EAAUM,MAEtBc,EAAO,IAAItB,EAAWQ,MAQ1B,OAPAc,EAAKC,QAAQF,GAEbb,KAAKC,OAAOe,MACXH,MAAOC,EACPN,MAAOA,IAGDA,GAGRS,YAAc,WACb1B,EAAOO,UAAUmB,YAAYlB,KAAKC,MAKlC,IAHA,IAAIkB,EAAQC,KAAKC,OAAOpB,KAAKqB,KAAKC,EAAItB,KAAKC,OAAOM,OAASP,KAAKE,WAAaF,KAAKC,OAAOM,QACrFe,EAAI,EAEAhB,EAAI,EAAGA,EAAIN,KAAKC,OAAOM,OAAQD,IACvC,CACC,IAAIO,EAAQb,KAAKC,OAAOK,GAAGO,MAC3BA,EAAMU,SAASC,IAAIF,EAAG,GACtBT,EAAMQ,KAAKG,IAAIxB,KAAKE,UAAWF,KAAKqB,KAAKI,GACzCZ,EAAMa,kBAEN,IAAIlB,EAAQR,KAAKC,OAAOK,GAAGE,MAC3BA,EAAMe,SAASC,IAAIF,EAAItB,KAAKE,UAAW,GACvCM,EAAMa,KAAKG,IAAIN,EAAOlB,KAAKqB,KAAKI,GAChCjB,EAAMkB,kBAENJ,GAAKJ,EAAQlB,KAAKE,cAKrB,OAAOT,EAASkC,UAAYA","file":"../NumberRow.js","sourcesContent":["define([\n\t\"skylark-widgets-base/Widget\",\n\t\"skylark-widgets-texts/StaticText\",\n\t\"./numerics\",\n\t\"./NumberBox\"\n],function(Widget,StaticText,numerics,NumberBox){\n\t\"use strict\";\n\n\t/**\n\t * The vector array box represents multiple numeric variables as a vector.\n\t *\n\t * @class NumberRow\n\t * @extends {Widget}\n\t */\n\tvar NumberBox = Widget.inherit({\n\n\t\t_construct : function (parent) {\n\t\t\tWidget.prototype._construct.call(this, parent, \"div\");\n\n\t\t\t/**\n\t\t\t * Array with the values objects.\n\t\t\t *\n\t\t\t * Each value object is composed of {label:label, input:input}\n\t\t\t *\n\t\t\t * @attribute values\n\t\t\t * @type {Array}\n\t\t\t */\n\t\t\tthis.values = [];\n\n\t\t\t/**\n\t\t\t * Label size in px.\n\t\t\t *\n\t\t\t * @attribute labelSize\n\t\t\t * @type {Number}\n\t\t\t */\n\t\t\tthis.labelSize = 15;\n\t\t},\n\n\t\t/**\n\t\t * Set the values step.\n\t\t *\n\t\t * @method setStep\n\t\t * @param {Number} value\n\t\t */\n\t\tsetStep : function(value) {\n\t\t\tvar value = String(value);\n\n\t\t\tfor(var i = 0; i < this.values.length; i++)\t{\n\t\t\t\tthis.values[i].input.setStep(value);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Set the values range\n\t\t *\n\t\t * @method setRange\n\t\t * @param {Number} min\n\t\t * @param {Number} max\n\t\t */\n\t\tsetRange : function(min, max) {\n\t\t \tvar min = String(min);\n\t\t \tvar max = String(max);\n\n\t\t\tfor(var i = 0; i < this.values.length; i++)\t{\n\t\t\t\tthis.values[i].input.setRange(min, max);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Add value to the box\n\t\t *\n\t\t * @method addValue\n\t\t * @param {String} label Label of de attribute.\n\t\t * @return {NumberBox} The input number box created for this value.\n\t\t */\n\t\taddValue : function(label) {\n\t\t\tvar input = new NumberBox(this);\n\n\t\t\tvar text = new StaticText(this);\n\t\t\ttext.setText(label);\t\n\n\t\t\tthis.values.push({\n\t\t\t\tlabel: text,\n\t\t\t\tinput: input\n\t\t\t});\n\n\t\t\treturn input;\n\t\t},\n\n\t\t_updateSize : function() {\n\t\t\tWidget.prototype._updateSize.call(this);\n\t\t\t\n\t\t\tvar width = Math.round((this.size.x - this.values.length * this.labelSize) / this.values.length);\n\t\t\tvar x = 0;\n\t\t\t\n\t\t\tfor(var i = 0; i < this.values.length; i++)\n\t\t\t{\n\t\t\t\tvar label = this.values[i].label;\n\t\t\t\tlabel.position.set(x, 0);\n\t\t\t\tlabel.size.set(this.labelSize, this.size.y);\n\t\t\t\tlabel.updateInterface();\n\n\t\t\t\tvar input = this.values[i].input;\n\t\t\t\tinput.position.set(x + this.labelSize, 0);\n\t\t\t\tinput.size.set(width, this.size.y);\n\t\t\t\tinput.updateInterface();\n\n\t\t\t\tx += width + this.labelSize;\n\t\t\t}\n\t\t}\n\t});\n\n\treturn numerics.NumberRow = NumberRow;\n});"]}